import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:realtime_client/realtime_client.dart';

class NotificationService {
  final _client = Supabase.instance.client;

  static const _channelId = 'messages_channel';
  static final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  RealtimeChannel? _rtChannel;

  static Future<void> initLocalNotifications() async {
    const android = AndroidInitializationSettings('@mipmap/ic_launcher');
    const ios = DarwinInitializationSettings();
    const settings = InitializationSettings(android: android, iOS: ios);
    await flutterLocalNotificationsPlugin.initialize(settings);
  }

  static Future<void> createAndroidNotificationChannel() async {
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      _channelId,
      'Messages',
      description: 'Notifications Ma GuinÃ©Â©Ã†â€™Â©e',
      importance: Importance.high,
    );
    await flutterLocalNotificationsPlugin
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.createNotificationChannel(channel);
  }

  static Future<void> globalInit() async {
    await initLocalNotifications();
    await createAndroidNotificationChannel();
  }

  Future<void> initializeFCM() async {
    final messaging = FirebaseMessaging.instance;
    await messaging.requestPermission();
    await FirebaseMessaging.instance
        .setForegroundNotificationPresentationOptions(
      alert: true,
      badge: true,
      sound: true,
    );

    FirebaseMessaging.onMessage.listen((m) {
      final n = m.notification;
      if (n != null)
        _showLocal(n.title ?? 'Nouvelle notification', n.body ?? '');
    });
  }

  void _showLocal(String title, String body) {
    flutterLocalNotificationsPlugin.show(
      DateTime.now().millisecondsSinceEpoch ~/ 1000,
      title,
      body,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          _channelId,
          'Messages',
          channelDescription: 'Notifications Ma GuinÃ©Â©Ã†â€™Â©e',
          importance: Importance.high,
          priority: Priority.high,
          icon: '@mipmap/ic_launcher',
        ),
        iOS: DarwinNotificationDetails(),
      ),
    );
  }

  /// Ecoute les INSERT sur `public.notifications` pour l'utilisateur courant
  void subscribeRealtime(
      String userId, void Function(Map<String, dynamic>) onNotification) {
    // Ã©Â©Ã†â€™Â©vite les doublons si on rÃ©Â©Ã†â€™Â©-appelle
    _rtChannel?.unsubscribe();

    _rtChannel = _client
        .channel('public:notifications')
        .onPostgresChanges(
          event: PostgresChangeEvent.insert,
          schema: 'public',
          table: 'notifications',
          filter: PostgresChangeFilter(
            type: PostgresChangeFilterType.eq,
            column: 'user_id', // Ã©Â©Â¢Ã©â€¦â‚¬Å“â€šÂ¬Â¦ CORRECTION ICI
            value: userId,
          ),
          callback: (payload) {
            final notif = payload.newRecord;
            if (notif != null) {
              _showLocal(
                (notif['titre'] ?? 'Nouvelle notification').toString(),
                (notif['contenu'] ?? '').toString(),
              );
              onNotification(Map<String, dynamic>.from(notif));
            }
          },
        )
        .subscribe();
  }

  void unsubscribeRealtime() {
    _rtChannel?.unsubscribe();
    _rtChannel = null;
  }
}
