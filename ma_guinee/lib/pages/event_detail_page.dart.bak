import 'package:flutter/material.dart';
import '../services/events_service.dart';

class EventDetailPage extends StatefulWidget {
  final Map<String, dynamic> event;
  const EventDetailPage({super.key, required this.event});

  @override
  State<EventDetailPage> createState() => _EventDetailPageState();
}

class _EventDetailPageState extends State<EventDetailPage> {
  final _svc = EventsService();
  bool _loading = true;
  List<Map<String, dynamic>> _ticketTypes = [];
  final Map<String, int> _quantities = {};

  @override
  void initState() {
    super.initState();
    _load();
  }

  Future<void> _load() async {
    final rows = await _svc.fetchTicketTypes(widget.event['id']);
    setState(() {
      _ticketTypes = rows;
      _loading = false;
    });
  }

  Future<void> _buyTickets() async {
    final items = _ticketTypes
        .where((t) => (_quantities[t['id']] ?? 0) > 0)
        .map((t) => {
              'ticket_type_id': t['id'],
              'quantity': _quantities[t['id']]!,
              'unit_cents': t['prix_cents'],
            })
        .toList();

    if (items.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
          content: Text('SÃ©Â©Ã†â€™Â©lectionnez au moins 1 billet')));
      return;
    }

    await _svc.createOrder(eventId: widget.event['id'], items: items);

    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Achat confirmÃ©Â©Ã†â€™Â© !')));
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    final ev = widget.event;
    return Scaffold(
      appBar: AppBar(
          title: Text(ev['titre'] ?? 'Ã©Â©Ã†â€™â€šÂ¬Â°vÃ©Â©Ã†â€™Â©nement')),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                ListTile(
                  title: Text(ev['lieu'] ?? ''),
                  subtitle: Text(ev['start_at'] ?? ''),
                ),
                Expanded(
                  child: ListView(
                    children: _ticketTypes.map((t) {
                      return ListTile(
                        title: Text(
                            '${t['nom']} - ${(t['prix_cents'] / 100).toStringAsFixed(2)} ${t['devise']}'),
                        trailing: DropdownButton<int>(
                          value: _quantities[t['id']] ?? 0,
                          items: List.generate(
                              6,
                              (i) => DropdownMenuItem(
                                    value: i,
                                    child: Text(i.toString()),
                                  )),
                          onChanged: (v) {
                            setState(() => _quantities[t['id']] = v ?? 0);
                          },
                        ),
                      );
                    }).toList(),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: ElevatedButton(
                    onPressed: _buyTickets,
                    child: const Text('Acheter'),
                  ),
                ),
              ],
            ),
    );
  }
}
